{"version":3,"sources":["Call.ts"],"names":["Call","constructor","params","id","callId","accountId","localContact","localUri","remoteContact","remoteUri","state","stateText","held","muted","speaker","connectDuration","totalDuration","remoteOfferer","remoteAudioCount","remoteVideoCount","audioCount","videoCount","lastStatusCode","lastReason","media","provisionalMedia","remoteNumber","remoteName","match","_remoteName","_remoteNumber","slice","_id","_callId","_accountId","_localContact","_localUri","_remoteContact","_remoteUri","_state","_stateText","_held","_muted","_speaker","_connectDuration","_totalDuration","_remoteOfferer","_remoteAudioCount","_remoteVideoCount","_audioCount","_videoCount","_lastStatusCode","_lastReason","_media","_provisionalMedia","_constructionTime","Math","round","Date","getTime","getId","getAccountId","getCallId","getTotalDuration","time","offset","getConnectDuration","getFormattedTotalDuration","_formatTime","getFormattedConnectDuration","getLocalContact","getLocalUri","getRemoteContact","getRemoteUri","getRemoteName","getRemoteNumber","getRemoteFormattedNumber","getState","getStateText","isHeld","isMuted","isSpeaker","isTerminated","getRemoteOfferer","getRemoteAudioCount","getRemoteVideoCount","getAudioCount","getVideoCount","getLastStatusCode","getLastReason","getMedia","getProvisionalMedia","seconds","isNaN","hours","parseInt","toString","minutes","result","restSeconds"],"mappings":"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AlD;AACD;;AACD,QAAI,KAAKA,aAAT,EAAwB;AACtB,aAAO,KAAKA,aAAZ;AACD;;AACD,WAAO,KAAKQ,UAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEuC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKtC,MAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEuC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKtC,UAAZ;AACD;;AAEDuC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKtC,KAAZ;AACD;;AAEDuC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKtC,MAAZ;AACD;;AAEDuC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKtC,QAAZ;AACD;;AAEDuC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAK3C,MAAL,KAAgB,8BAAvB;AACD;AAED;AACF;AACA;AACA;;;AACE4C,EAAAA,gBAAgB,GAAG;AACjB;AACA,WAAO,KAAKrC,cAAZ;AACD;AAED;AACF;AACA;AACA;;;AACEsC,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKrC,iBAAZ;AACD;AAED;AACF;AACA;AACA;;;AACEsC,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKrC,iBAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEsC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKrC,WAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEsC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKrC,WAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEsC,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKrC,eAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEsC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKrC,WAAZ;AACD;;AAEDsC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKrC,MAAZ;AACD;;AAEDsC,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKrC,iBAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEc,EAAAA,WAAW,CAACwB,OAAD,EAAkB;AAC3B,QAAIC,KAAK,CAACD,OAAD,CAAL,IAAkBA,OAAO,GAAG,CAAhC,EAAmC;AACjC,aAAO,OAAP;AACD;;AACD,UAAME,KAAK,GAAGC,QAAQ,CAAC,CAACH,OAAO,GAAG,IAAX,EAAiBI,QAAjB,EAAD,EAA8B,EAA9B,CAAR,GAA4C,EAA1D;AACA,UAAMC,OAAO,GAAGF,QAAQ,CAAC,CAACH,OAAO,GAAG,EAAX,EAAeI,QAAf,EAAD,EAA4B,EAA5B,CAAR,GAA0C,EAA1D;AACA,QAAIE,MAAM,GAAG,EAAb;AACA,UAAMC,WAAW,GAAGP,OAAO,GAAG,EAA9B;;AAEA,QAAIE,KAAK,GAAG,CAAZ,EAAe;AACbI,MAAAA,MAAM,IAAK,GAAEJ,KAAK,GAAG,EAAR,GAAc,IAAGA,KAAM,EAAvB,GAA2BA,KAAM,GAA9C;AACD;;AAEDI,IAAAA,MAAM,IAAK,GAAED,OAAO,GAAG,EAAV,GAAgB,IAAGA,OAAQ,EAA3B,GAA+BA,OAAQ,IAAGE,WAAW,GAAG,EAAd,GAAoB,IAAGA,WAAY,EAAnC,GAAuCA,WAAY,EAA1G;AACA,WAAOD,MAAP;AACD;;AA9jBuB","sourcesContent":["/**\n * This class describes the information and current status of a call.\n */\nexport type CallStates =\n  | \"PJSIP_INV_STATE_NULL\"\n  | \"PJSIP_INV_STATE_CALLING\"\n  | \"PJSIP_INV_STATE_INCOMING\"\n  | \"PJSIP_INV_STATE_EARLY\"\n  | \"PJSIP_INV_STATE_CONNECTING\"\n  | \"PJSIP_INV_STATE_CONFIRMED\"\n  | \"PJSIP_INV_STATE_DISCONNECTED\";\n\nexport type CallStateText = \"NULL\" | \"CALLING\" | \"INCOMING\" | \"EARLY\" | \"CONNECTING\" | \"CONFIRMED\" | \"DISCONNECTED\";\n\nexport interface CallConstructor {\n  id: number;\n  callId: number;\n  accountId: number;\n  localContact: string;\n  localUri: string;\n  remoteContact: string;\n  remoteUri: string;\n  state: CallStates;\n  stateText: CallStateText;\n  held: boolean;\n  muted: boolean;\n  speaker: boolean;\n  connectDuration: number;\n  totalDuration: number;\n  remoteOfferer: boolean;\n  remoteAudioCount: number;\n  remoteVideoCount: number;\n  audioCount: number;\n  videoCount: number;\n  lastStatusCode: any;\n  lastReason: any;\n  media: any;\n  provisionalMedia: any;\n}\nexport default class Call {\n  _id: number;\n\n  _callId: number;\n\n  _accountId: number;\n\n  _localContact: string;\n\n  _localUri: string;\n\n  _remoteContact: string;\n\n  _remoteUri: string;\n\n  _state: CallStates;\n\n  _stateText: CallStateText;\n\n  _held: boolean;\n\n  _muted: boolean;\n\n  _speaker: boolean;\n\n  _connectDuration: number;\n\n  _totalDuration: number;\n\n  _remoteOfferer: boolean;\n\n  _remoteAudioCount: number;\n\n  _remoteVideoCount: number;\n\n  _remoteNumber: string | null;\n\n  _remoteName: string | null;\n\n  _audioCount: number;\n\n  _videoCount: number;\n\n  _lastStatusCode:\n    | \"PJSIP_SC_TRYING\"\n    | 100\n    | \"PJSIP_SC_RINGING\"\n    | 180\n    | \"PJSIP_SC_CALL_BEING_FORWARDED\"\n    | 181\n    | \"PJSIP_SC_QUEUED\"\n    | 182\n    | \"PJSIP_SC_PROGRESS\"\n    | 183\n    | \"PJSIP_SC_OK\"\n    | 200\n    | \"PJSIP_SC_ACCEPTED\"\n    | 202\n    | \"PJSIP_SC_MULTIPLE_CHOICES\"\n    | 300\n    | \"PJSIP_SC_MOVED_PERMANENTLY\"\n    | 301\n    | \"PJSIP_SC_MOVED_TEMPORARILY\"\n    | 302\n    | \"PJSIP_SC_USE_PROXY\"\n    | 305\n    | \"PJSIP_SC_ALTERNATIVE_SERVICE\"\n    | 380\n    | \"PJSIP_SC_BAD_REQUEST\"\n    | 400\n    | \"PJSIP_SC_UNAUTHORIZED\"\n    | 401\n    | \"PJSIP_SC_PAYMENT_REQUIRED\"\n    | 402\n    | \"PJSIP_SC_FORBIDDEN\"\n    | 403\n    | \"PJSIP_SC_NOT_FOUND\"\n    | 404\n    | \"PJSIP_SC_METHOD_NOT_ALLOWED\"\n    | 405\n    | \"PJSIP_SC_NOT_ACCEPTABLE\"\n    | 406\n    | \"PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED\"\n    | 407\n    | \"PJSIP_SC_REQUEST_TIMEOUT\"\n    | 408\n    | \"PJSIP_SC_GONE\"\n    | 410\n    | \"PJSIP_SC_REQUEST_ENTITY_TOO_LARGE\"\n    | 413\n    | \"PJSIP_SC_REQUEST_URI_TOO_LONG\"\n    | 414\n    | \"PJSIP_SC_UNSUPPORTED_MEDIA_TYPE\"\n    | 415\n    | \"PJSIP_SC_UNSUPPORTED_URI_SCHEME\"\n    | 416\n    | \"PJSIP_SC_BAD_EXTENSION\"\n    | 420\n    | \"PJSIP_SC_EXTENSION_REQUIRED\"\n    | 421\n    | \"PJSIP_SC_SESSION_TIMER_TOO_SMALL\"\n    | 422\n    | \"PJSIP_SC_INTERVAL_TOO_BRIEF\"\n    | 423\n    | \"PJSIP_SC_TEMPORARILY_UNAVAILABLE\"\n    | 480\n    | \"PJSIP_SC_CALL_TSX_DOES_NOT_EXIST\"\n    | 481\n    | \"PJSIP_SC_LOOP_DETECTED\"\n    | 482\n    | \"PJSIP_SC_TOO_MANY_HOPS\"\n    | 483\n    | \"PJSIP_SC_ADDRESS_INCOMPLETE\"\n    | 484\n    | \"PJSIP_AC_AMBIGUOUS\"\n    | 485\n    | \"PJSIP_SC_BUSY_HERE\"\n    | 486\n    | \"PJSIP_SC_REQUEST_TERMINATED\"\n    | 487\n    | \"PJSIP_SC_NOT_ACCEPTABLE_HERE\"\n    | 488\n    | \"PJSIP_SC_BAD_EVENT\"\n    | 489\n    | \"PJSIP_SC_REQUEST_UPDATED\"\n    | 490\n    | \"PJSIP_SC_REQUEST_PENDING\"\n    | 491\n    | \"PJSIP_SC_UNDECIPHERABLE\"\n    | 493\n    | \"PJSIP_SC_INTERNAL_SERVER_ERROR\"\n    | 500\n    | \"PJSIP_SC_NOT_IMPLEMENTED\"\n    | 501\n    | \"PJSIP_SC_BAD_GATEWAY\"\n    | 502\n    | \"PJSIP_SC_SERVICE_UNAVAILABLE\"\n    | 503\n    | \"PJSIP_SC_SERVER_TIMEOUT\"\n    | 504\n    | \"PJSIP_SC_VERSION_NOT_SUPPORTED\"\n    | 505\n    | \"PJSIP_SC_MESSAGE_TOO_LARGE\"\n    | 513\n    | \"PJSIP_SC_PRECONDITION_FAILURE\"\n    | 580\n    | \"PJSIP_SC_BUSY_EVERYWHERE\"\n    | 600\n    | \"PJSIP_SC_DECLINE\"\n    | 603\n    | \"PJSIP_SC_DOES_NOT_EXIST_ANYWHERE\"\n    | 604\n    | \"PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE\"\n    | 606\n    | \"PJSIP_SC_TSX_TIMEOUT\"\n    | \"PJSIP_SC_REQUEST_TIMEOUT\"\n    | \"PJSIP_SC_TSX_TRANSPORT_ERROR\"\n    | \"PJSIP_SC_SERVICE_UNAVAILABLE\";\n\n  _lastReason: string;\n\n  _media: any;\n\n  _provisionalMedia: any;\n\n  _constructionTime: number;\n\n  constructor(params: CallConstructor) {\n    const {\n      id,\n      callId,\n      accountId,\n      localContact,\n      localUri,\n      remoteContact,\n      remoteUri,\n      state,\n      stateText,\n      held,\n      muted,\n      speaker,\n      connectDuration,\n      totalDuration,\n      remoteOfferer,\n      remoteAudioCount,\n      remoteVideoCount,\n      audioCount,\n      videoCount,\n      lastStatusCode,\n      lastReason,\n      media,\n      provisionalMedia,\n    } = params;\n    let remoteNumber = null;\n    let remoteName = null;\n\n    if (remoteUri) {\n      let match = remoteUri.match(/\"([^\"]+)\" <sip:([^@]+)@/);\n\n      if (match) {\n        const [_remoteName, _remoteNumber] = match.slice(1);\n\n        remoteName = _remoteName;\n        remoteNumber = _remoteNumber;\n      } else {\n        match = remoteUri.match(/sip:([^@]+)@/);\n\n        if (match) {\n          const [_remoteNumber] = match.slice(1);\n          remoteNumber = _remoteNumber;\n        }\n      }\n    }\n\n    this._id = id;\n    this._callId = callId;\n    this._accountId = accountId;\n    this._localContact = localContact;\n    this._localUri = localUri;\n    this._remoteContact = remoteContact;\n    this._remoteUri = remoteUri;\n    this._state = state;\n    this._stateText = stateText;\n    this._held = held;\n    this._muted = muted;\n    this._speaker = speaker;\n    this._connectDuration = connectDuration;\n    this._totalDuration = totalDuration;\n    this._remoteOfferer = remoteOfferer;\n    this._remoteAudioCount = remoteAudioCount;\n    this._remoteVideoCount = remoteVideoCount;\n    this._remoteNumber = remoteNumber;\n    this._remoteName = remoteName;\n    this._audioCount = audioCount;\n    this._videoCount = videoCount;\n    this._lastStatusCode = lastStatusCode;\n    this._lastReason = lastReason;\n\n    this._media = media;\n    this._provisionalMedia = provisionalMedia;\n\n    this._constructionTime = Math.round(new Date().getTime() / 1000);\n  }\n\n  /**\n   * Call identification.\n   * @returns {int}\n   */\n  getId() {\n    return this._id;\n  }\n\n  /**\n   * The account ID where this call belongs.\n   * @returns {int}\n   */\n  getAccountId() {\n    return this._accountId;\n  }\n\n  /**\n   * Dialog Call-ID string.\n   *\n   * @returns {String}\n   */\n  getCallId() {\n    return this._callId;\n  }\n\n  /**\n   * Up-to-date call duration in seconds.\n   * Use local time to calculate actual call duration.\n   *\n   * @public\n   * @returns {int}\n   */\n  getTotalDuration() {\n    const time = Math.round(new Date().getTime() / 1000);\n    const offset = time - this._constructionTime;\n\n    return this._totalDuration + offset;\n  }\n\n  /**\n   * Up-to-date call connected duration (zero when call is not established)\n   *\n   * @returns {int}\n   */\n  getConnectDuration() {\n    if (this._connectDuration < 0 || this._state === \"PJSIP_INV_STATE_DISCONNECTED\") {\n      return this._connectDuration;\n    }\n\n    const time = Math.round(new Date().getTime() / 1000);\n    const offset = time - this._constructionTime;\n\n    return this._connectDuration + offset;\n  }\n\n  /**\n   * Call duration in \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  getFormattedTotalDuration() {\n    return this._formatTime(this.getTotalDuration());\n  }\n\n  /**\n   * Call duration in \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  getFormattedConnectDuration() {\n    return this._formatTime(this.getConnectDuration());\n  }\n\n  /**\n   * Local Contact.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getLocalContact() {\n    return this._localContact;\n  }\n\n  /**\n   * Local URI.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getLocalUri() {\n    return this._localUri;\n  }\n\n  /**\n   * Remote contact.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getRemoteContact() {\n    return this._remoteContact;\n  }\n\n  /**\n   * Remote URI.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getRemoteUri() {\n    return this._remoteUri;\n  }\n\n  /**\n   * Callee name. Could be null if no name specified in URI.\n   * @returns {String}\n   */\n  getRemoteName() {\n    return this._remoteName;\n  }\n\n  /**\n   * Callee number\n   * @returns {String}\n   */\n  getRemoteNumber() {\n    return this._remoteNumber;\n  }\n\n  /**\n   * @returns {String}\n   */\n  getRemoteFormattedNumber() {\n    if (this._remoteName && this._remoteNumber) {\n      return `${this._remoteName} <${this._remoteNumber}>`;\n    }\n    if (this._remoteNumber) {\n      return this._remoteNumber;\n    }\n    return this._remoteUri;\n  }\n\n  /**\n   * Invite session state.\n   *\n   * PJSIP_INV_STATE_NULL           Before INVITE is sent or received\n   * PJSIP_INV_STATE_CALLING        After INVITE is sent\n   * PJSIP_INV_STATE_INCOMING       After INVITE is received.\n   * PJSIP_INV_STATE_EARLY          After response with To tag.\n   * PJSIP_INV_STATE_CONNECTING     After 2xx is sent/received.\n   * PJSIP_INV_STATE_CONFIRMED      After ACK is sent/received.\n   * PJSIP_INV_STATE_DISCONNECTED   Session is terminated.\n   *\n   * @returns {String}\n   */\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * Text describing the state.\n   *\n   * @returns {String}\n   */\n  getStateText() {\n    return this._stateText;\n  }\n\n  isHeld() {\n    return this._held;\n  }\n\n  isMuted() {\n    return this._muted;\n  }\n\n  isSpeaker() {\n    return this._speaker;\n  }\n\n  isTerminated() {\n    return this._state === \"PJSIP_INV_STATE_DISCONNECTED\";\n  }\n\n  /**\n   * Flag if remote was SDP offerer\n   * @returns {boolean}\n   */\n  getRemoteOfferer() {\n    // TODO Verify whether boolean value\n    return this._remoteOfferer;\n  }\n\n  /**\n   * Number of audio streams offered by remote.\n   * @returns {int}\n   */\n  getRemoteAudioCount() {\n    return this._remoteAudioCount;\n  }\n\n  /**\n   * Number of video streams offered by remote.\n   * @returns {int}\n   */\n  getRemoteVideoCount() {\n    return this._remoteVideoCount;\n  }\n\n  /**\n   * Number of simultaneous active audio streams for this call.\n   * If zero - audio is disabled in this call.\n   * @returns {int}\n   */\n  getAudioCount() {\n    return this._audioCount;\n  }\n\n  /**\n   * Number of simultaneous active video streams for this call.\n   * If zero - video is disabled in this call.\n   * @returns {*}\n   */\n  getVideoCount() {\n    return this._videoCount;\n  }\n\n  /**\n   * Last status code heard, which can be used as cause code.\n   * Possible values:\n   * - PJSIP_SC_TRYING / 100\n   * - PJSIP_SC_RINGING / 180\n   * - PJSIP_SC_CALL_BEING_FORWARDED / 181\n   * - PJSIP_SC_QUEUED / 182\n   * - PJSIP_SC_PROGRESS / 183\n   * - PJSIP_SC_OK / 200\n   * - PJSIP_SC_ACCEPTED / 202\n   * - PJSIP_SC_MULTIPLE_CHOICES / 300\n   * - PJSIP_SC_MOVED_PERMANENTLY / 301\n   * - PJSIP_SC_MOVED_TEMPORARILY / 302\n   * - PJSIP_SC_USE_PROXY / 305\n   * - PJSIP_SC_ALTERNATIVE_SERVICE / 380\n   * - PJSIP_SC_BAD_REQUEST / 400\n   * - PJSIP_SC_UNAUTHORIZED / 401\n   * - PJSIP_SC_PAYMENT_REQUIRED / 402\n   * - PJSIP_SC_FORBIDDEN / 403\n   * - PJSIP_SC_NOT_FOUND / 404\n   * - PJSIP_SC_METHOD_NOT_ALLOWED / 405\n   * - PJSIP_SC_NOT_ACCEPTABLE / 406\n   * - PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED / 407\n   * - PJSIP_SC_REQUEST_TIMEOUT / 408\n   * - PJSIP_SC_GONE / 410\n   * - PJSIP_SC_REQUEST_ENTITY_TOO_LARGE / 413\n   * - PJSIP_SC_REQUEST_URI_TOO_LONG / 414\n   * - PJSIP_SC_UNSUPPORTED_MEDIA_TYPE / 415\n   * - PJSIP_SC_UNSUPPORTED_URI_SCHEME / 416\n   * - PJSIP_SC_BAD_EXTENSION / 420\n   * - PJSIP_SC_EXTENSION_REQUIRED / 421\n   * - PJSIP_SC_SESSION_TIMER_TOO_SMALL / 422\n   * - PJSIP_SC_INTERVAL_TOO_BRIEF / 423\n   * - PJSIP_SC_TEMPORARILY_UNAVAILABLE / 480\n   * - PJSIP_SC_CALL_TSX_DOES_NOT_EXIST / 481\n   * - PJSIP_SC_LOOP_DETECTED / 482\n   * - PJSIP_SC_TOO_MANY_HOPS / 483\n   * - PJSIP_SC_ADDRESS_INCOMPLETE / 484\n   * - PJSIP_AC_AMBIGUOUS / 485\n   * - PJSIP_SC_BUSY_HERE / 486\n   * - PJSIP_SC_REQUEST_TERMINATED / 487\n   * - PJSIP_SC_NOT_ACCEPTABLE_HERE / 488\n   * - PJSIP_SC_BAD_EVENT / 489\n   * - PJSIP_SC_REQUEST_UPDATED / 490\n   * - PJSIP_SC_REQUEST_PENDING / 491\n   * - PJSIP_SC_UNDECIPHERABLE / 493\n   * - PJSIP_SC_INTERNAL_SERVER_ERROR / 500\n   * - PJSIP_SC_NOT_IMPLEMENTED / 501\n   * - PJSIP_SC_BAD_GATEWAY / 502\n   * - PJSIP_SC_SERVICE_UNAVAILABLE / 503\n   * - PJSIP_SC_SERVER_TIMEOUT / 504\n   * - PJSIP_SC_VERSION_NOT_SUPPORTED / 505\n   * - PJSIP_SC_MESSAGE_TOO_LARGE / 513\n   * - PJSIP_SC_PRECONDITION_FAILURE / 580\n   * - PJSIP_SC_BUSY_EVERYWHERE / 600\n   * - PJSIP_SC_DECLINE / 603\n   * - PJSIP_SC_DOES_NOT_EXIST_ANYWHERE / 604\n   * - PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE / 606\n   * - PJSIP_SC_TSX_TIMEOUT / PJSIP_SC_REQUEST_TIMEOUT\n   * - PJSIP_SC_TSX_TRANSPORT_ERROR / PJSIP_SC_SERVICE_UNAVAILABLE\n   *\n   * @returns {string}\n   */\n  getLastStatusCode() {\n    return this._lastStatusCode;\n  }\n\n  /**\n   * The reason phrase describing the last status.\n   *\n   * @returns {string}\n   */\n  getLastReason() {\n    return this._lastReason;\n  }\n\n  getMedia() {\n    return this._media;\n  }\n\n  getProvisionalMedia() {\n    return this._provisionalMedia;\n  }\n\n  /**\n   * Format seconds to \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  _formatTime(seconds: number) {\n    if (isNaN(seconds) || seconds < 0) {\n      return \"00:00\";\n    }\n    const hours = parseInt((seconds / 3600).toString(), 10) % 24;\n    const minutes = parseInt((seconds / 60).toString(), 10) % 60;\n    let result = \"\";\n    const restSeconds = seconds % 60;\n\n    if (hours > 0) {\n      result += `${hours < 10 ? `0${hours}` : hours}:`;\n    }\n\n    result += `${minutes < 10 ? `0${minutes}` : minutes}:${restSeconds < 10 ? `0${restSeconds}` : restSeconds}`;\n    return result;\n  }\n}\n"]}