{"version":3,"sources":["Endpoint.ts"],"names":["ORIENTATIONS","Endpoint","EventEmitter","constructor","DeviceEventEmitter","addListener","_onRegistrationChanged","bind","_onCallReceived","_onCallChanged","_onCallTerminated","_onCallScreenLocked","_onMessageReceived","_onConnectivityChanged","_onGSMChanged","start","configuration","Promise","resolve","reject","NativeModules","PjSipModule","successful","data","accounts","calls","hasOwnProperty","forEach","d","push","Account","Call","extra","Object","entries","key","value","stop","updateStunServers","accountId","stunServerList","changeNetworkConfiguration","changeServiceConfiguration","createAccount","registerAccount","account","renew","getId","deleteAccount","makeCall","destination","callSettings","msgData","normalizedDestination","_normalize","sendMessage","msg","imTyping","isTyping","answerCall","call","hangupCall","declineCall","holdCall","unholdCall","muteCall","unMuteCall","useSpeaker","useEarpiece","xferCall","xferReplacesCall","destCall","redirectCall","dtmfCall","digits","activateAudioSession","deactivateAudioSession","changeOrientation","orientation","indexOf","Error","JSON","stringify","join","changeCodecSettings","codecSettings","emit","lock","Message","normalizedData","startsWith","realm","getRegServer","getDomain","s","substr"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport { EventEmitter } from \"events\";\nimport { DeviceEventEmitter, NativeModules } from \"react-native\";\nimport Account, { AccountConstructor } from \"./Account\";\nimport Call, { CallConstructor } from \"./Call\";\nimport Message from \"./Message\";\n\n/**\n * SIP headers object, where each key is a header name and value is a header value.\n * Example:\n * {\n *   \"X-Custom-Header\": \"Test Header Value\",\n *   \"X-Custom-ID\": \"Awesome Header\"\n * }\n *\n * @typedef {Object} PjSipHdrList\n */\n\n/**\n * An additional information to be sent with outgoing SIP message.\n * It can (optionally) be specified for example\n * with #Endpoint.makeCall(), #Endpoint.answerCall(), #Endpoint.hangupCall(),\n * #Endpoint.holdCall() and many more.\n *\n * @typedef {Object} PjSipMsgData\n * @property {String} target_uri - Indicates whether the Courage component is present.\n * @property {PjSipHdrList} hdr_list - Additional message headers as linked list.\n * @property {String} content_type - MIME type of optional message body.\n * @property {String} msg_body - MIME type of optional message body.\n */\n\n/**\n * An additional information to be sent with outgoing SIP message.\n * It can (optionally) be specified for example\n * with #Endpoint.makeCall(), #Endpoint.answerCall(), #Endpoint.hangupCall(),\n * #Endpoint.holdCall() and many more.\n *\n * @typedef {Object} PjSipCallSetttings\n * @property {number} flag - Bitmask of #pjsua_call_flag constants.\n * @property {number} req_keyframe_method - This flag controls what methods to request\n * keyframe are allowed on the call.\n * @property {number} aud_cnt - Number of simultaneous active audio streams for this call.\n * Setting this to zero will disable audio in this call.\n * @property {number} vid_cnt - Number of simultaneous active video streams for this call.\n * Setting this to zero will disable video in this call.\n */\n\ninterface startResult {\n  accounts: Array<AccountConstructor>;\n  calls: Array<CallConstructor>;\n  settings: any;\n  connectivity: any;\n}\n\ninterface createAccountConfiguration {\n  name: string;\n  username: string;\n  domain: string;\n  password: string;\n  proxy: string;\n  transport: string;\n  regServer: string;\n  regTimeout: number;\n}\n\ninterface PjSipCallSetttings {\n  /**\n   *\n   * Bitmask of #pjsua_call_flag constants.\n   * @type {number}\n   * @memberof PjSipCallSetttings\n   */\n  flag: number;\n\n  /**\n   *\n   * This flag controls what methods to request keyframe are allowed on the call.\n   * @type {number}\n   * @memberof PjSipCallSetttings\n   */\n  req_keyfram_method: number;\n\n  /**\n   *\n   * Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n   * @type {number}\n   * @memberof PjSipCallSetttings\n   */\n  aud_cnt: number;\n\n  /**\n   *\n   * Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n   * @type {number}\n   * @memberof PjSipCallSetttings\n   */\n  vid_cnt: number;\n}\ninterface PjSipMsgData {\n  /**\n   *\n   * Indicates whether the Courage component is present.\n   * @type {string}\n   * @memberof PjSipMsgData\n   */\n  target_uri: string;\n\n  /**\n   *\n   * Additional message headers as linked list.\n   * @type {*}\n   * @memberof PjSipMsgData\n   */\n  hdr_list: {\n    [key: string]: string | number;\n  };\n\n  /**\n   *\n   * MIME type of optional message body.\n   * @type {string}\n   * @memberof PjSipMsgData\n   */\n  content_type: string;\n\n  /**\n   *\n   * MIME type of optional message body.\n   * @type {string}\n   * @memberof PjSipMsgData\n   */\n  msg_body: string;\n}\n\nconst ORIENTATIONS = [\n  \"PJMEDIA_ORIENT_UNKNOWN\",\n  \"PJMEDIA_ORIENT_ROTATE_90DEG\",\n  \"PJMEDIA_ORIENT_ROTATE_270DEG\",\n  \"PJMEDIA_ORIENT_ROTATE_180DEG\",\n  \"PJMEDIA_ORIENT_NATURAL\",\n];\n\ntype OrientationType =\n  | \"PJMEDIA_ORIENT_UNKNOWN\"\n  | \"PJMEDIA_ORIENT_ROTATE_90DEG\"\n  | \"PJMEDIA_ORIENT_ROTATE_270DEG\"\n  | \"PJMEDIA_ORIENT_ROTATE_180DEG\"\n  | \"PJMEDIA_ORIENT_NATURAL\";\n\nexport default class Endpoint extends EventEmitter {\n  constructor() {\n    super();\n\n    // Subscribe to Accounts events\n    DeviceEventEmitter.addListener(\"pjSipRegistrationChanged\", this._onRegistrationChanged.bind(this));\n\n    // Subscribe to Calls events\n    DeviceEventEmitter.addListener(\"pjSipCallReceived\", this._onCallReceived.bind(this));\n    DeviceEventEmitter.addListener(\"pjSipCallChanged\", this._onCallChanged.bind(this));\n    DeviceEventEmitter.addListener(\"pjSipCallTerminated\", this._onCallTerminated.bind(this));\n    DeviceEventEmitter.addListener(\"pjSipCallScreenLocked\", this._onCallScreenLocked.bind(this));\n    DeviceEventEmitter.addListener(\"pjSipMessageReceived\", this._onMessageReceived.bind(this));\n    DeviceEventEmitter.addListener(\"pjSipConnectivityChanged\", this._onConnectivityChanged.bind(this));\n    DeviceEventEmitter.addListener(\"pjSipGSMChanged\", this._onGSMChanged.bind(this));\n  }\n\n  /**\n   * Returns a Promise that will be resolved once PjSip module is initialized.\n   * Do not call any function while library is not initialized.\n   *\n   * @returns {Promise}\n   */\n  start(configuration: any) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.start(configuration, (successful: boolean, data: startResult) => {\n        if (successful) {\n          const accounts: Array<Account> = [];\n          const calls: Array<Call> = [];\n\n          if (data.hasOwnProperty(\"accounts\")) {\n            data.accounts.forEach((d: AccountConstructor) => {\n              accounts.push(new Account(d));\n            });\n          }\n\n          if (data.hasOwnProperty(\"calls\")) {\n            data.calls.forEach((d: CallConstructor) => {\n              calls.push(new Call(d));\n            });\n          }\n\n          const extra: any = {};\n          Object.entries(data).forEach(([key, value]) => {\n            if (data.hasOwnProperty(key) && key !== \"accounts\" && key !== \"calls\") {\n              extra[key] = value;\n            }\n          });\n\n          resolve({\n            accounts,\n            calls,\n            ...extra,\n          });\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  stop() {\n    return new Promise(resolve => {\n      NativeModules.PjSipModule.stop(() => {\n        resolve({});\n      });\n    });\n  }\n\n  updateStunServers(accountId: number, stunServerList: any) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.updateStunServers(accountId, stunServerList, (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param configuration\n   * @returns {Promise}\n   */\n  changeNetworkConfiguration(configuration: any) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.changeNetworkConfiguration(configuration, (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param configuration\n   * @returns {Promise}\n   */\n  changeServiceConfiguration(configuration: any) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.changeServiceConfiguration(configuration, (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Add a new account. If registration is configured for this account, this function would also start the\n   * SIP registration session with the SIP registrar server. This SIP registration session will be maintained\n   * internally by the library, and application doesn't need to do anything to maintain the registration session.\n   *\n   * An example configuration:\n   * {\n   *   name: \"John Doe\",\n   *   username: \"100\",\n   *   domain: \"pbx.com\",\n   *   password: \"XXXXXX\",\n   *\n   *   proxy: \"192.168.100.1:5060\", // default disabled.\n   *   transport: \"TCP\", // default TCP\n   *   regServer: \"pbx.com\", // default taken from domain\n   *   regTimeout: 300, // default 300\n   * }\n   *\n   * @param {Object} configuration\n   * @returns {Promise}\n   */\n  createAccount(configuration: createAccountConfiguration) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.createAccount(configuration, (successful: boolean, data: AccountConstructor) => {\n        if (successful) {\n          resolve(new Account(data));\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  // replaceAccount(account: any, configuration: any) {\n  //   throw new Error(\"Not implemented\");\n  // }\n\n  /**\n   * Update registration or perform unregistration.\n   * If registration is configured for this account, then initial SIP REGISTER will be sent when the account is added.\n   * Application normally only need to call this function if it wants to manually update the registration or to unregister from the server.\n   *\n   * @param {Account} account\n   * @param bool renew If renew argument is zero, this will start unregistration process.\n   * @returns {Promise}\n   */\n  registerAccount(account: Account, renew = true) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.registerAccount(account.getId(), renew, (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Delete an account. This will unregister the account from the SIP server, if necessary, and terminate server side presence subscriptions associated with this account.\n   *\n   * @param {Account} account\n   * @returns {Promise}\n   */\n  deleteAccount(account: Account) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.deleteAccount(account.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Make an outgoing call to the specified URI.\n   * Available call settings:\n   * - audioCount - Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n   * - videoCount - Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n   * -\n   *\n   * @param account {Account}\n   * @param destination {String} Destination SIP URI.\n   * @param callSettings {PjSipCallSetttings} Outgoing call settings.\n   * @param msgSettings {PjSipMsgData} Outgoing call additional information to be sent with outgoing SIP message.\n   */\n  makeCall(account: Account, destination: string, callSettings: PjSipCallSetttings, msgData: PjSipMsgData) {\n    const normalizedDestination = this._normalize(account, destination);\n\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.makeCall(\n        account.getId(),\n        normalizedDestination,\n        callSettings,\n        msgData,\n        (successful: boolean, data: CallConstructor) => {\n          if (successful) {\n            resolve(new Call(data));\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Send message to the specified URI.\n   * -\n   *\n   * @param account {Account}\n   * @param destination {String} Destination SIP URI.\n   * @param msg {String} Message.\n   */\n  sendMessage(account: Account, destination: string, msg: string) {\n    const normalizedDestination = this._normalize(account, destination);\n\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.sendMessage(\n        account.getId(),\n        normalizedDestination,\n        msg,\n        (successful: boolean, data: any) => {\n          if (successful) {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  imTyping(account: Account, destination: string, isTyping: boolean) {\n    const normalizedDestination = this._normalize(account, destination);\n\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.imTyping(\n        account.getId(),\n        normalizedDestination,\n        isTyping,\n        (successful: boolean, data: any) => {\n          if (successful) {\n            resolve(data);\n          } else {\n            reject(data);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Send response to incoming INVITE request.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  answerCall(call: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.answerCall(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Hangup call by using method that is appropriate according to the call state.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  hangupCall(call: Call) {\n    // TODO: Add possibility to pass code and reason for hangup.\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.hangupCall(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Hangup call by using Decline (603) method.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  declineCall(call: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.declineCall(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Put the specified call on hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is being put on hold.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  holdCall(call: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.holdCall(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Release the specified call from hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is resumed.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  unholdCall(call: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.unholdCall(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  muteCall(call: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.muteCall(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  unMuteCall(call: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.unMuteCall(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  useSpeaker(call: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.useSpeaker(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  useEarpiece(call: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.useEarpiece(call.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Initiate call transfer to the specified address.\n   * This function will send REFER request to instruct remote call party to initiate a new INVITE session to the specified destination/target.\n   *\n   * @param account {Account} Account associated with call.\n   * @param call {Call} The call to be transferred.\n   * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n   * @returns {Promise}\n   */\n  xferCall(account: Account, call: Call, destination: string) {\n    const normalizedDestination = this._normalize(account, destination);\n\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.xferCall(call.getId(), normalizedDestination, (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Initiate attended call transfer.\n   * This function will send REFER request to instruct remote call party to initiate new INVITE session to the URL of destCall.\n   * The party at destCall then should \"replace\" the call with us with the new call from the REFER recipient.\n   *\n   * @param call {Call} The call to be transferred.\n   * @param destCall {Call} The call to be transferred.\n   * @returns {Promise}\n   */\n  xferReplacesCall(call: Call, destCall: Call) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.xferReplacesCall(call.getId(), destCall.getId(), (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Redirect (forward) specified call to destination.\n   * This function will send response to INVITE to instruct remote call party to redirect incoming call to the specified destination/target.\n   *\n   * @param account {Account} Account associated with call.\n   * @param call {Call} The call to be transferred.\n   * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n   * @returns {Promise}\n   */\n  redirectCall(account: Account, call: Call, destination: string) {\n    const normalizedDestination = this._normalize(account, destination);\n\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.redirectCall(call.getId(), normalizedDestination, (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * Send DTMF digits to remote using RFC 2833 payload formats.\n   *\n   * @param call {Call} Call instance\n   * @param digits {String} DTMF string digits to be sent as described on RFC 2833 section 3.10.\n   * @returns {Promise}\n   */\n  dtmfCall(call: Call, digits: string) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.dtmfCall(call.getId(), digits, (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  activateAudioSession() {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.activateAudioSession((successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  deactivateAudioSession() {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.deactivateAudioSession((successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  changeOrientation(orientation: OrientationType) {\n    if (ORIENTATIONS.indexOf(orientation) === -1) {\n      throw new Error(\n        `Invalid ${JSON.stringify(orientation)} device orientation, but expected ${ORIENTATIONS.join(\", \")} values`,\n      );\n    }\n\n    NativeModules.PjSipModule.changeOrientation(orientation);\n  }\n\n  changeCodecSettings(codecSettings: any) {\n    return new Promise((resolve, reject) => {\n      NativeModules.PjSipModule.changeCodecSettings(codecSettings, (successful: boolean, data: any) => {\n        if (successful) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  }\n\n  /**\n   * @fires Endpoint#connectivity_changed\n   * @private\n   * @param data {Object}\n   */\n  _onConnectivityChanged(data: AccountConstructor) {\n    /**\n     * Fires when registration status has changed.\n     *\n     * @event Endpoint#connectivity_changed\n     * @property {Account} account\n     */\n    this.emit(\"connectivity_changed\", new Account(data));\n  }\n\n  /**\n   * @fires Endpoint#gsm_changed\n   * @private\n   * @param data {Boolean}\n   */\n  _onGSMChanged(data: any) {\n    /**\n     * Fires when registration status has changed.\n     *\n     * @event Endpoint#gsm_changed\n     * @property {Boolean} isUsingGSM\n     */\n    this.emit(\"gsm_changed\", data);\n  }\n\n  /**\n   * @fires Endpoint#registration_changed\n   * @private\n   * @param data {Object}\n   */\n  _onRegistrationChanged(data: any) {\n    /**\n     * Fires when registration status has changed.\n     *\n     * @event Endpoint#registration_changed\n     * @property {Account} account\n     */\n    this.emit(\"registration_changed\", new Account(data));\n  }\n\n  /**\n   * @fires Endpoint#call_received\n   * @private\n   * @param data {Object}\n   */\n  _onCallReceived(data: CallConstructor) {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_received\n     * @property {Call} call\n     */\n    this.emit(\"call_received\", new Call(data));\n  }\n\n  /**\n   * @fires Endpoint#call_changed\n   * @private\n   * @param data {Object}\n   */\n  _onCallChanged(data: CallConstructor) {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_changed\n     * @property {Call} call\n     */\n    this.emit(\"call_changed\", new Call(data));\n  }\n\n  /**\n   * @fires Endpoint#call_terminated\n   * @private\n   * @param data {Object}\n   */\n  _onCallTerminated(data: CallConstructor) {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_terminated\n     * @property {Call} call\n     */\n    this.emit(\"call_terminated\", new Call(data));\n  }\n\n  /**\n   * @fires Endpoint#call_screen_locked\n   * @private\n   * @param lock bool\n   */\n  _onCallScreenLocked(lock: boolean) {\n    /**\n     * TODO\n     *\n     * @event Endpoint#call_screen_locked\n     * @property bool lock\n     */\n    this.emit(\"call_screen_locked\", lock);\n  }\n\n  /**\n   * @fires Endpoint#message_received\n   * @private\n   * @param data {Object}\n   */\n  _onMessageReceived(data: any) {\n    /**\n     * TODO\n     *\n     * @event Endpoint#message_received\n     * @property {Message} message\n     */\n    this.emit(\"message_received\", new Message(data));\n  }\n\n  // /**\n  //  * @fires Endpoint#connectivity_changed\n  //  * @private\n  //  * @param available bool\n  //  */\n  // _onConnectivityChanged(available) {\n  //   /**\n  //    * @event Endpoint#connectivity_changed\n  //    * @property bool available True if connectivity matches current Network settings, otherwise false.\n  //    */\n  //   this.emit(\"connectivity_changed\", available);\n  // }\n\n  /**\n   * Normalize Destination URI\n   *\n   * @param account\n   * @param destination {string}\n   * @returns {string}\n   * @private\n   */\n  _normalize(account: Account, destination: string) {\n    let normalizedData = null;\n    if (!destination.startsWith(\"sip:\")) {\n      let realm = account.getRegServer();\n\n      if (!realm) {\n        realm = account.getDomain();\n        const s = realm.indexOf(\":\");\n\n        if (s > 0) {\n          realm = realm.substr(0, s + 1);\n        }\n      }\n\n      normalizedData = `sip:${destination}@${realm}`;\n    }\n\n    return normalizedData;\n  }\n  // setUaConfig(UaConfig value)\n  // setMaxCalls\n  // setUserAgent\n  // setNatTypeInSdp\n\n  // setLogConfig(LogConfig value)\n  // setLevel\n}\n"]}