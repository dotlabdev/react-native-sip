{"version":3,"sources":["Endpoint.d.ts"],"names":["Endpoint","EventEmitter"],"mappings":";;;;;;;AACA;;AADA;AA6Ee,MAAMA,QAAN,SAAuBC,oBAAvB,CAAoC","sourcesContent":["/// <reference types=\"node\" />\nimport { EventEmitter } from \"events\";\nimport Account, { AccountConstructor } from \"./Account\";\nimport Call, { CallConstructor } from \"./Call\";\ninterface createAccountConfiguration {\n    name: string;\n    username: string;\n    domain: string;\n    password: string;\n    proxy: string;\n    transport: string;\n    regServer: string;\n    regTimeout: number;\n}\ninterface PjSipCallSetttings {\n    /**\n     *\n     * Bitmask of #pjsua_call_flag constants.\n     * @type {number}\n     * @memberof PjSipCallSetttings\n     */\n    flag: number;\n    /**\n     *\n     * This flag controls what methods to request keyframe are allowed on the call.\n     * @type {number}\n     * @memberof PjSipCallSetttings\n     */\n    req_keyfram_method: number;\n    /**\n     *\n     * Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n     * @type {number}\n     * @memberof PjSipCallSetttings\n     */\n    aud_cnt: number;\n    /**\n     *\n     * Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n     * @type {number}\n     * @memberof PjSipCallSetttings\n     */\n    vid_cnt: number;\n}\ninterface PjSipMsgData {\n    /**\n     *\n     * Indicates whether the Courage component is present.\n     * @type {string}\n     * @memberof PjSipMsgData\n     */\n    target_uri: string;\n    /**\n     *\n     * Additional message headers as linked list.\n     * @type {*}\n     * @memberof PjSipMsgData\n     */\n    hdr_list: {\n        [key: string]: string | number;\n    };\n    /**\n     *\n     * MIME type of optional message body.\n     * @type {string}\n     * @memberof PjSipMsgData\n     */\n    content_type: string;\n    /**\n     *\n     * MIME type of optional message body.\n     * @type {string}\n     * @memberof PjSipMsgData\n     */\n    msg_body: string;\n}\ndeclare type OrientationType = \"PJMEDIA_ORIENT_UNKNOWN\" | \"PJMEDIA_ORIENT_ROTATE_90DEG\" | \"PJMEDIA_ORIENT_ROTATE_270DEG\" | \"PJMEDIA_ORIENT_ROTATE_180DEG\" | \"PJMEDIA_ORIENT_NATURAL\";\nexport default class Endpoint extends EventEmitter {\n    constructor();\n    /**\n     * Returns a Promise that will be resolved once PjSip module is initialized.\n     * Do not call any function while library is not initialized.\n     *\n     * @returns {Promise}\n     */\n    start(configuration: any): Promise<unknown>;\n    stop(): Promise<unknown>;\n    updateStunServers(accountId: number, stunServerList: any): Promise<unknown>;\n    /**\n     * @param configuration\n     * @returns {Promise}\n     */\n    changeNetworkConfiguration(configuration: any): Promise<unknown>;\n    /**\n     * @param configuration\n     * @returns {Promise}\n     */\n    changeServiceConfiguration(configuration: any): Promise<unknown>;\n    /**\n     * Add a new account. If registration is configured for this account, this function would also start the\n     * SIP registration session with the SIP registrar server. This SIP registration session will be maintained\n     * internally by the library, and application doesn't need to do anything to maintain the registration session.\n     *\n     * An example configuration:\n     * {\n     *   name: \"John Doe\",\n     *   username: \"100\",\n     *   domain: \"pbx.com\",\n     *   password: \"XXXXXX\",\n     *\n     *   proxy: \"192.168.100.1:5060\", // default disabled.\n     *   transport: \"TCP\", // default TCP\n     *   regServer: \"pbx.com\", // default taken from domain\n     *   regTimeout: 300, // default 300\n     * }\n     *\n     * @param {Object} configuration\n     * @returns {Promise}\n     */\n    createAccount(configuration: createAccountConfiguration): Promise<unknown>;\n    /**\n     * Update registration or perform unregistration.\n     * If registration is configured for this account, then initial SIP REGISTER will be sent when the account is added.\n     * Application normally only need to call this function if it wants to manually update the registration or to unregister from the server.\n     *\n     * @param {Account} account\n     * @param bool renew If renew argument is zero, this will start unregistration process.\n     * @returns {Promise}\n     */\n    registerAccount(account: Account, renew?: boolean): Promise<unknown>;\n    /**\n     * Delete an account. This will unregister the account from the SIP server, if necessary, and terminate server side presence subscriptions associated with this account.\n     *\n     * @param {Account} account\n     * @returns {Promise}\n     */\n    deleteAccount(account: Account): Promise<unknown>;\n    /**\n     * Make an outgoing call to the specified URI.\n     * Available call settings:\n     * - audioCount - Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n     * - videoCount - Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n     * -\n     *\n     * @param account {Account}\n     * @param destination {String} Destination SIP URI.\n     * @param callSettings {PjSipCallSetttings} Outgoing call settings.\n     * @param msgSettings {PjSipMsgData} Outgoing call additional information to be sent with outgoing SIP message.\n     */\n    makeCall(account: Account, destination: string, callSettings: PjSipCallSetttings, msgData: PjSipMsgData): Promise<unknown>;\n    /**\n     * Send message to the specified URI.\n     * -\n     *\n     * @param account {Account}\n     * @param destination {String} Destination SIP URI.\n     * @param msg {String} Message.\n     */\n    sendMessage(account: Account, destination: string, msg: string): Promise<unknown>;\n    imTyping(account: Account, destination: string, isTyping: boolean): Promise<unknown>;\n    /**\n     * Send response to incoming INVITE request.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    answerCall(call: Call): Promise<unknown>;\n    /**\n     * Hangup call by using method that is appropriate according to the call state.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    hangupCall(call: Call): Promise<unknown>;\n    /**\n     * Hangup call by using Decline (603) method.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    declineCall(call: Call): Promise<unknown>;\n    /**\n     * Put the specified call on hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is being put on hold.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    holdCall(call: Call): Promise<unknown>;\n    /**\n     * Release the specified call from hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is resumed.\n     *\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    unholdCall(call: Call): Promise<unknown>;\n    /**\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    muteCall(call: Call): Promise<unknown>;\n    /**\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    unMuteCall(call: Call): Promise<unknown>;\n    /**\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    useSpeaker(call: Call): Promise<unknown>;\n    /**\n     * @param call {Call} Call instance\n     * @returns {Promise}\n     */\n    useEarpiece(call: Call): Promise<unknown>;\n    /**\n     * Initiate call transfer to the specified address.\n     * This function will send REFER request to instruct remote call party to initiate a new INVITE session to the specified destination/target.\n     *\n     * @param account {Account} Account associated with call.\n     * @param call {Call} The call to be transferred.\n     * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n     * @returns {Promise}\n     */\n    xferCall(account: Account, call: Call, destination: string): Promise<unknown>;\n    /**\n     * Initiate attended call transfer.\n     * This function will send REFER request to instruct remote call party to initiate new INVITE session to the URL of destCall.\n     * The party at destCall then should \"replace\" the call with us with the new call from the REFER recipient.\n     *\n     * @param call {Call} The call to be transferred.\n     * @param destCall {Call} The call to be transferred.\n     * @returns {Promise}\n     */\n    xferReplacesCall(call: Call, destCall: Call): Promise<unknown>;\n    /**\n     * Redirect (forward) specified call to destination.\n     * This function will send response to INVITE to instruct remote call party to redirect incoming call to the specified destination/target.\n     *\n     * @param account {Account} Account associated with call.\n     * @param call {Call} The call to be transferred.\n     * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n     * @returns {Promise}\n     */\n    redirectCall(account: Account, call: Call, destination: string): Promise<unknown>;\n    /**\n     * Send DTMF digits to remote using RFC 2833 payload formats.\n     *\n     * @param call {Call} Call instance\n     * @param digits {String} DTMF string digits to be sent as described on RFC 2833 section 3.10.\n     * @returns {Promise}\n     */\n    dtmfCall(call: Call, digits: string): Promise<unknown>;\n    activateAudioSession(): Promise<unknown>;\n    deactivateAudioSession(): Promise<unknown>;\n    changeOrientation(orientation: OrientationType): void;\n    changeCodecSettings(codecSettings: any): Promise<unknown>;\n    /**\n     * @fires Endpoint#connectivity_changed\n     * @private\n     * @param data {Object}\n     */\n    _onConnectivityChanged(data: AccountConstructor): void;\n    /**\n     * @fires Endpoint#gsm_changed\n     * @private\n     * @param data {Boolean}\n     */\n    _onGSMChanged(data: any): void;\n    /**\n     * @fires Endpoint#registration_changed\n     * @private\n     * @param data {Object}\n     */\n    _onRegistrationChanged(data: any): void;\n    /**\n     * @fires Endpoint#call_received\n     * @private\n     * @param data {Object}\n     */\n    _onCallReceived(data: CallConstructor): void;\n    /**\n     * @fires Endpoint#call_changed\n     * @private\n     * @param data {Object}\n     */\n    _onCallChanged(data: CallConstructor): void;\n    /**\n     * @fires Endpoint#call_terminated\n     * @private\n     * @param data {Object}\n     */\n    _onCallTerminated(data: CallConstructor): void;\n    /**\n     * @fires Endpoint#call_screen_locked\n     * @private\n     * @param lock bool\n     */\n    _onCallScreenLocked(lock: boolean): void;\n    /**\n     * @fires Endpoint#message_received\n     * @private\n     * @param data {Object}\n     */\n    _onMessageReceived(data: any): void;\n    /**\n     * Normalize Destination URI\n     *\n     * @param account\n     * @param destination {string}\n     * @returns {string}\n     * @private\n     */\n    _normalize(account: Account, destination: string): string | null;\n}\nexport {};\n"]}