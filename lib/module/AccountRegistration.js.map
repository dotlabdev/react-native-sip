{"version":3,"sources":["AccountRegistration.ts"],"names":["AccountRegistration","constructor","props","status","statusText","active","reason","_status","_statusText","_active","_reason","getStatus","getStatusText","isActive","getReason","toJson"],"mappings":";;AAAA;AACA;AACA;AACA;AAQA,eAAe,MAAMA,mBAAN,CAA0B;AASvCC,EAAAA,WAAW,CAACC,KAAD,EAAwC;AAAA;;AAAA;;AAAA;;AAAA;;AACjD,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,UAAV;AAAsBC,MAAAA,MAAtB;AAA8BC,MAAAA;AAA9B,QAAyCJ,KAA/C;AAEA,SAAKK,OAAL,GAAeJ,MAAf;AACA,SAAKK,WAAL,GAAmBJ,UAAnB;AACA,SAAKK,OAAL,GAAeJ,MAAf;AACA,SAAKK,OAAL,GAAeJ,MAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKJ,OAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKJ,WAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKJ,OAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKJ,OAAZ;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,WAAO;AACLZ,MAAAA,MAAM,EAAE,KAAKI,OADR;AAELH,MAAAA,UAAU,EAAE,KAAKI,WAFZ;AAGLH,MAAAA,MAAM,EAAE,KAAKI,OAHR;AAILH,MAAAA,MAAM,EAAE,KAAKI;AAJR,KAAP;AAMD;;AAjEsC","sourcesContent":["/**\n * Account registration information. Application can query the registration info\n * by calling account.getRegistration().\n */\nexport interface AccountRegistrationConstructor {\n  status: string | null;\n  statusText: string | null;\n  active: boolean;\n  reason: string | null;\n}\n\nexport default class AccountRegistration {\n  _status;\n\n  _statusText;\n\n  _active;\n\n  _reason;\n\n  constructor(props: AccountRegistrationConstructor) {\n    const { status, statusText, active, reason } = props;\n\n    this._status = status;\n    this._statusText = statusText;\n    this._active = active;\n    this._reason = reason;\n  }\n\n  /**\n   * Last registration status code (SIP status codes according to RFC 3261).\n   * If status code is empty, the account is currently not registered.\n   * Any other value indicates the SIP\n   * status code of the registration.\n   *\n   * @returns {string|null}\n   */\n  getStatus() {\n    return this._status;\n  }\n\n  /**\n   * String describing the registration status.\n   *\n   * @returns {string|null}\n   */\n  getStatusText() {\n    return this._statusText;\n  }\n\n  /**\n   * Flag to tell whether this account is currently registered\n   * (has active registration session).\n   *\n   * @returns boolean\n   */\n  isActive() {\n    return this._active;\n  }\n\n  /**\n   * Reason phrase received.\n   *\n   * @returns {String|null}\n   */\n  getReason() {\n    return this._reason;\n  }\n\n  toJson() {\n    return {\n      status: this._status,\n      statusText: this._statusText,\n      active: this._active,\n      reason: this._reason,\n    };\n  }\n}\n"]}