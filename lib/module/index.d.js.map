{"version":3,"sources":["index.d.ts"],"names":["EventEmitter","AccountRegistration","Account","Call","Endpoint"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,cAA7B;AAEA;AACA;AACA;AACA;;AAOA,OAAO,MAAMC,mBAAN,CAA0B;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAmDjC;AACA;AACA;;AAoBA,OAAO,MAAMC,OAAN,CAAc;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAmGrB;AACA;AACA;;AA0CA,OAAO,MAAMC,IAAN,CAAW;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAgoBlB,OAAO,MAAMC,QAAN,SAAuBJ,YAAvB,CAAoC","sourcesContent":["import { EventEmitter } from 'react-native';\n\n/**\n * Account registration information. Application can query the registration info\n * by calling account.getRegistration().\n */\ninterface AccountRegistrationConstructor {\n  status: string | null;\n  statusText: string | null;\n  active: boolean;\n  reason: string | null;\n}\nexport class AccountRegistration {\n  _status: string | null;\n\n  _statusText: string | null;\n\n  _active: boolean;\n\n  _reason: string | null;\n\n  constructor(props: AccountRegistrationConstructor);\n\n  /**\n   * Last registration status code (SIP status codes according to RFC 3261).\n   * If status code is empty, the account is currently not registered.\n   * Any other value indicates the SIP\n   * status code of the registration.\n   *\n   * @returns {string|null}\n   */\n  getStatus(): string | null;\n\n  /**\n   * String describing the registration status.\n   *\n   * @returns {string|null}\n   */\n  getStatusText(): string | null;\n\n  /**\n   * Flag to tell whether this account is currently registered\n   * (has active registration session).\n   *\n   * @returns boolean\n   */\n  isActive(): boolean;\n\n  /**\n   * Reason phrase received.\n   *\n   * @returns {String|null}\n   */\n  getReason(): string | null;\n\n  toJson(): {\n    status: string | null;\n    statusText: string | null;\n    active: boolean;\n    reason: string | null;\n  };\n}\n\n/**\n * This describes account configuration and registration status\n */\ninterface AccountData {\n  id: number;\n  uri: string;\n  name: string;\n  username: string;\n  domain: string;\n  password: string;\n  proxy: string;\n  transport: string;\n  contactParams: string;\n  contactUriParams: string;\n  regServer: string;\n  regTimeout: string;\n  regContactParams: string;\n  regHeaders: any;\n}\ninterface AccountConstructor extends AccountData {\n  registration: any;\n}\nexport class Account {\n  _data: AccountData;\n\n  _registration: AccountRegistration;\n\n  constructor(data: AccountConstructor);\n\n  /**\n   * The account ID.\n   * @returns {int}\n   */\n  getId(): number;\n\n  /**\n   * This is the URL to be put in the request URI for the registration,\n   * and will look something like \"sip:serviceprovider\".\n   * @returns {String}\n   */\n  getURI(): string;\n\n  /**\n   * Full name specified in Endpoint.createAccount().\n   * @returns {String}\n   */\n  getName(): string;\n\n  /**\n   * Username specified in Endpoint.createAccount().\n   * @returns {String}\n   */\n  getUsername(): string;\n\n  /**\n   * Domain specified in Endpoint.createAccount().\n   * @returns {int|null}\n   */\n  getDomain(): string;\n\n  /**\n   * Password specified in Endpoint.createAccount().\n   * @returns {String}\n   */\n  getPassword(): string;\n\n  /**\n   * Proxy specified in Endpoint.createAccount().\n   * @returns {String}\n   */\n  getProxy(): string;\n\n  /**\n   * Transport specified in Endpoint.createAccount().\n   * @returns {String}\n   */\n  getTransport(): string;\n\n  /**\n   * Additional parameters that will be appended in the Contact header\n   * for this account.\n   * @returns {String}\n   */\n  getContactParams(): string;\n\n  /**\n   * Additional URI parameters that will be appended in the Contact URI\n   * for this account.\n   * @returns {String}\n   */\n  getContactUriParams(): string;\n\n  /**\n   * Port specified in Endpoint.createAccount().\n   * @returns {String}\n   */\n  getRegServer(): string;\n\n  /**\n   * Port specified in Endpoint.createAccount().\n   * @returns {String}\n   */\n  getRegTimeout(): string;\n\n  /**\n   * @returns {String}\n   */\n  getRegContactParams(): string;\n\n  /**\n   * @returns {Object}\n   */\n  getRegHeaders(): any;\n\n  /**\n   * Account registration status.\n   * @returns {AccountRegistration}\n   */\n  getRegistration(): AccountRegistration;\n}\n\n/**\n * This class describes the information and current status of a call.\n */\nexport declare type CallStates =\n  | 'PJSIP_INV_STATE_NULL'\n  | 'PJSIP_INV_STATE_CALLING'\n  | 'PJSIP_INV_STATE_INCOMING'\n  | 'PJSIP_INV_STATE_EARLY'\n  | 'PJSIP_INV_STATE_CONNECTING'\n  | 'PJSIP_INV_STATE_CONFIRMED'\n  | 'PJSIP_INV_STATE_DISCONNECTED';\nexport declare type CallStateText =\n  | 'NULL'\n  | 'CALLING'\n  | 'INCOMING'\n  | 'EARLY'\n  | 'CONNECTING'\n  | 'CONFIRMED'\n  | 'DISCONNECTED';\nexport interface CallConstructor {\n  id: number;\n  callId: number;\n  accountId: number;\n  localContact: string;\n  localUri: string;\n  remoteContact: string;\n  remoteUri: string;\n  state: CallStates;\n  stateText: CallStateText;\n  held: boolean;\n  muted: boolean;\n  speaker: boolean;\n  connectDuration: number;\n  totalDuration: number;\n  remoteOfferer: boolean;\n  remoteAudioCount: number;\n  remoteVideoCount: number;\n  audioCount: number;\n  videoCount: number;\n  lastStatusCode: any;\n  lastReason: any;\n  media: any;\n  provisionalMedia: any;\n}\nexport class Call {\n  _id: number;\n\n  _callId: number;\n\n  _accountId: number;\n\n  _localContact: string;\n\n  _localUri: string;\n\n  _remoteContact: string;\n\n  _remoteUri: string;\n\n  _state:\n    | 'PJSIP_INV_STATE_NULL'\n    | 'PJSIP_INV_STATE_CALLING'\n    | 'PJSIP_INV_STATE_INCOMING'\n    | 'PJSIP_INV_STATE_EARLY'\n    | 'PJSIP_INV_STATE_CONNECTING'\n    | 'PJSIP_INV_STATE_CONFIRMED'\n    | 'PJSIP_INV_STATE_DISCONNECTED';\n\n  _stateText: string;\n\n  _held: boolean;\n\n  _muted: boolean;\n\n  _speaker: boolean;\n\n  _connectDuration: number;\n\n  _totalDuration: number;\n\n  _remoteOfferer: boolean;\n\n  _remoteAudioCount: number;\n\n  _remoteVideoCount: number;\n\n  _remoteNumber: string | null;\n\n  _remoteName: string | null;\n\n  _audioCount: number;\n\n  _videoCount: number;\n\n  _lastStatusCode:\n    | 'PJSIP_SC_TRYING'\n    | 100\n    | 'PJSIP_SC_RINGING'\n    | 180\n    | 'PJSIP_SC_CALL_BEING_FORWARDED'\n    | 181\n    | 'PJSIP_SC_QUEUED'\n    | 182\n    | 'PJSIP_SC_PROGRESS'\n    | 183\n    | 'PJSIP_SC_OK'\n    | 200\n    | 'PJSIP_SC_ACCEPTED'\n    | 202\n    | 'PJSIP_SC_MULTIPLE_CHOICES'\n    | 300\n    | 'PJSIP_SC_MOVED_PERMANENTLY'\n    | 301\n    | 'PJSIP_SC_MOVED_TEMPORARILY'\n    | 302\n    | 'PJSIP_SC_USE_PROXY'\n    | 305\n    | 'PJSIP_SC_ALTERNATIVE_SERVICE'\n    | 380\n    | 'PJSIP_SC_BAD_REQUEST'\n    | 400\n    | 'PJSIP_SC_UNAUTHORIZED'\n    | 401\n    | 'PJSIP_SC_PAYMENT_REQUIRED'\n    | 402\n    | 'PJSIP_SC_FORBIDDEN'\n    | 403\n    | 'PJSIP_SC_NOT_FOUND'\n    | 404\n    | 'PJSIP_SC_METHOD_NOT_ALLOWED'\n    | 405\n    | 'PJSIP_SC_NOT_ACCEPTABLE'\n    | 406\n    | 'PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED'\n    | 407\n    | 'PJSIP_SC_REQUEST_TIMEOUT'\n    | 408\n    | 'PJSIP_SC_GONE'\n    | 410\n    | 'PJSIP_SC_REQUEST_ENTITY_TOO_LARGE'\n    | 413\n    | 'PJSIP_SC_REQUEST_URI_TOO_LONG'\n    | 414\n    | 'PJSIP_SC_UNSUPPORTED_MEDIA_TYPE'\n    | 415\n    | 'PJSIP_SC_UNSUPPORTED_URI_SCHEME'\n    | 416\n    | 'PJSIP_SC_BAD_EXTENSION'\n    | 420\n    | 'PJSIP_SC_EXTENSION_REQUIRED'\n    | 421\n    | 'PJSIP_SC_SESSION_TIMER_TOO_SMALL'\n    | 422\n    | 'PJSIP_SC_INTERVAL_TOO_BRIEF'\n    | 423\n    | 'PJSIP_SC_TEMPORARILY_UNAVAILABLE'\n    | 480\n    | 'PJSIP_SC_CALL_TSX_DOES_NOT_EXIST'\n    | 481\n    | 'PJSIP_SC_LOOP_DETECTED'\n    | 482\n    | 'PJSIP_SC_TOO_MANY_HOPS'\n    | 483\n    | 'PJSIP_SC_ADDRESS_INCOMPLETE'\n    | 484\n    | 'PJSIP_AC_AMBIGUOUS'\n    | 485\n    | 'PJSIP_SC_BUSY_HERE'\n    | 486\n    | 'PJSIP_SC_REQUEST_TERMINATED'\n    | 487\n    | 'PJSIP_SC_NOT_ACCEPTABLE_HERE'\n    | 488\n    | 'PJSIP_SC_BAD_EVENT'\n    | 489\n    | 'PJSIP_SC_REQUEST_UPDATED'\n    | 490\n    | 'PJSIP_SC_REQUEST_PENDING'\n    | 491\n    | 'PJSIP_SC_UNDECIPHERABLE'\n    | 493\n    | 'PJSIP_SC_INTERNAL_SERVER_ERROR'\n    | 500\n    | 'PJSIP_SC_NOT_IMPLEMENTED'\n    | 501\n    | 'PJSIP_SC_BAD_GATEWAY'\n    | 502\n    | 'PJSIP_SC_SERVICE_UNAVAILABLE'\n    | 503\n    | 'PJSIP_SC_SERVER_TIMEOUT'\n    | 504\n    | 'PJSIP_SC_VERSION_NOT_SUPPORTED'\n    | 505\n    | 'PJSIP_SC_MESSAGE_TOO_LARGE'\n    | 513\n    | 'PJSIP_SC_PRECONDITION_FAILURE'\n    | 580\n    | 'PJSIP_SC_BUSY_EVERYWHERE'\n    | 600\n    | 'PJSIP_SC_DECLINE'\n    | 603\n    | 'PJSIP_SC_DOES_NOT_EXIST_ANYWHERE'\n    | 604\n    | 'PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE'\n    | 606\n    | 'PJSIP_SC_TSX_TIMEOUT'\n    | 'PJSIP_SC_REQUEST_TIMEOUT'\n    | 'PJSIP_SC_TSX_TRANSPORT_ERROR'\n    | 'PJSIP_SC_SERVICE_UNAVAILABLE';\n\n  _lastReason: string;\n\n  _media: any;\n\n  _provisionalMedia: any;\n\n  _constructionTime: number;\n\n  constructor(params: {\n    id: number;\n    callId: number;\n    accountId: number;\n    localContact: string;\n    localUri: string;\n    remoteContact: string;\n    remoteUri: string;\n    state: any;\n    stateText: any;\n    held: boolean;\n    muted: boolean;\n    speaker: boolean;\n    connectDuration: number;\n    totalDuration: number;\n    remoteOfferer: boolean;\n    remoteAudioCount: number;\n    remoteVideoCount: number;\n    audioCount: number;\n    videoCount: number;\n    lastStatusCode: any;\n    lastReason: any;\n    media: any;\n    provisionalMedia: any;\n  });\n\n  /**\n   * Call identification.\n   * @returns {int}\n   */\n  getId(): number;\n\n  /**\n   * The account ID where this call belongs.\n   * @returns {int}\n   */\n  getAccountId(): number;\n\n  /**\n   * Dialog Call-ID string.\n   *\n   * @returns {String}\n   */\n  getCallId(): number;\n\n  /**\n   * Up-to-date call duration in seconds.\n   * Use local time to calculate actual call duration.\n   *\n   * @public\n   * @returns {int}\n   */\n  getTotalDuration(): number;\n\n  /**\n   * Up-to-date call connected duration (zero when call is not established)\n   *\n   * @returns {int}\n   */\n  getConnectDuration(): number;\n\n  /**\n   * Call duration in \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  getFormattedTotalDuration(): string;\n\n  /**\n   * Call duration in \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  getFormattedConnectDuration(): string;\n\n  /**\n   * Local Contact.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getLocalContact(): string;\n\n  /**\n   * Local URI.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getLocalUri(): string;\n\n  /**\n   * Remote contact.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getRemoteContact(): string;\n\n  /**\n   * Remote URI.\n   * TODO: Provide example\n   * @returns {String}\n   */\n  getRemoteUri(): string;\n\n  /**\n   * Callee name. Could be null if no name specified in URI.\n   * @returns {String}\n   */\n  getRemoteName(): string | null;\n\n  /**\n   * Callee number\n   * @returns {String}\n   */\n  getRemoteNumber(): string | null;\n\n  /**\n   * @returns {String}\n   */\n  getRemoteFormattedNumber(): string;\n\n  /**\n   * Invite session state.\n   *\n   * PJSIP_INV_STATE_NULL           Before INVITE is sent or received\n   * PJSIP_INV_STATE_CALLING        After INVITE is sent\n   * PJSIP_INV_STATE_INCOMING       After INVITE is received.\n   * PJSIP_INV_STATE_EARLY          After response with To tag.\n   * PJSIP_INV_STATE_CONNECTING     After 2xx is sent/received.\n   * PJSIP_INV_STATE_CONFIRMED      After ACK is sent/received.\n   * PJSIP_INV_STATE_DISCONNECTED   Session is terminated.\n   *\n   * @returns {String}\n   */\n  getState():\n    | 'PJSIP_INV_STATE_NULL'\n    | 'PJSIP_INV_STATE_CALLING'\n    | 'PJSIP_INV_STATE_INCOMING'\n    | 'PJSIP_INV_STATE_EARLY'\n    | 'PJSIP_INV_STATE_CONNECTING'\n    | 'PJSIP_INV_STATE_CONFIRMED'\n    | 'PJSIP_INV_STATE_DISCONNECTED';\n\n  /**\n   * Text describing the state.\n   *\n   * @returns {String}\n   */\n  getStateText(): string;\n\n  isHeld(): boolean;\n\n  isMuted(): boolean;\n\n  isSpeaker(): boolean;\n\n  isTerminated(): boolean;\n\n  /**\n   * Flag if remote was SDP offerer\n   * @returns {boolean}\n   */\n  getRemoteOfferer(): boolean;\n\n  /**\n   * Number of audio streams offered by remote.\n   * @returns {int}\n   */\n  getRemoteAudioCount(): number;\n\n  /**\n   * Number of video streams offered by remote.\n   * @returns {int}\n   */\n  getRemoteVideoCount(): number;\n\n  /**\n   * Number of simultaneous active audio streams for this call.\n   * If zero - audio is disabled in this call.\n   * @returns {int}\n   */\n  getAudioCount(): number;\n\n  /**\n   * Number of simultaneous active video streams for this call.\n   * If zero - video is disabled in this call.\n   * @returns {*}\n   */\n  getVideoCount(): number;\n\n  /**\n   * Last status code heard, which can be used as cause code.\n   * Possible values:\n   * - PJSIP_SC_TRYING / 100\n   * - PJSIP_SC_RINGING / 180\n   * - PJSIP_SC_CALL_BEING_FORWARDED / 181\n   * - PJSIP_SC_QUEUED / 182\n   * - PJSIP_SC_PROGRESS / 183\n   * - PJSIP_SC_OK / 200\n   * - PJSIP_SC_ACCEPTED / 202\n   * - PJSIP_SC_MULTIPLE_CHOICES / 300\n   * - PJSIP_SC_MOVED_PERMANENTLY / 301\n   * - PJSIP_SC_MOVED_TEMPORARILY / 302\n   * - PJSIP_SC_USE_PROXY / 305\n   * - PJSIP_SC_ALTERNATIVE_SERVICE / 380\n   * - PJSIP_SC_BAD_REQUEST / 400\n   * - PJSIP_SC_UNAUTHORIZED / 401\n   * - PJSIP_SC_PAYMENT_REQUIRED / 402\n   * - PJSIP_SC_FORBIDDEN / 403\n   * - PJSIP_SC_NOT_FOUND / 404\n   * - PJSIP_SC_METHOD_NOT_ALLOWED / 405\n   * - PJSIP_SC_NOT_ACCEPTABLE / 406\n   * - PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED / 407\n   * - PJSIP_SC_REQUEST_TIMEOUT / 408\n   * - PJSIP_SC_GONE / 410\n   * - PJSIP_SC_REQUEST_ENTITY_TOO_LARGE / 413\n   * - PJSIP_SC_REQUEST_URI_TOO_LONG / 414\n   * - PJSIP_SC_UNSUPPORTED_MEDIA_TYPE / 415\n   * - PJSIP_SC_UNSUPPORTED_URI_SCHEME / 416\n   * - PJSIP_SC_BAD_EXTENSION / 420\n   * - PJSIP_SC_EXTENSION_REQUIRED / 421\n   * - PJSIP_SC_SESSION_TIMER_TOO_SMALL / 422\n   * - PJSIP_SC_INTERVAL_TOO_BRIEF / 423\n   * - PJSIP_SC_TEMPORARILY_UNAVAILABLE / 480\n   * - PJSIP_SC_CALL_TSX_DOES_NOT_EXIST / 481\n   * - PJSIP_SC_LOOP_DETECTED / 482\n   * - PJSIP_SC_TOO_MANY_HOPS / 483\n   * - PJSIP_SC_ADDRESS_INCOMPLETE / 484\n   * - PJSIP_AC_AMBIGUOUS / 485\n   * - PJSIP_SC_BUSY_HERE / 486\n   * - PJSIP_SC_REQUEST_TERMINATED / 487\n   * - PJSIP_SC_NOT_ACCEPTABLE_HERE / 488\n   * - PJSIP_SC_BAD_EVENT / 489\n   * - PJSIP_SC_REQUEST_UPDATED / 490\n   * - PJSIP_SC_REQUEST_PENDING / 491\n   * - PJSIP_SC_UNDECIPHERABLE / 493\n   * - PJSIP_SC_INTERNAL_SERVER_ERROR / 500\n   * - PJSIP_SC_NOT_IMPLEMENTED / 501\n   * - PJSIP_SC_BAD_GATEWAY / 502\n   * - PJSIP_SC_SERVICE_UNAVAILABLE / 503\n   * - PJSIP_SC_SERVER_TIMEOUT / 504\n   * - PJSIP_SC_VERSION_NOT_SUPPORTED / 505\n   * - PJSIP_SC_MESSAGE_TOO_LARGE / 513\n   * - PJSIP_SC_PRECONDITION_FAILURE / 580\n   * - PJSIP_SC_BUSY_EVERYWHERE / 600\n   * - PJSIP_SC_DECLINE / 603\n   * - PJSIP_SC_DOES_NOT_EXIST_ANYWHERE / 604\n   * - PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE / 606\n   * - PJSIP_SC_TSX_TIMEOUT / PJSIP_SC_REQUEST_TIMEOUT\n   * - PJSIP_SC_TSX_TRANSPORT_ERROR / PJSIP_SC_SERVICE_UNAVAILABLE\n   *\n   * @returns {string}\n   */\n  getLastStatusCode():\n    | 'PJSIP_SC_TRYING'\n    | 100\n    | 'PJSIP_SC_RINGING'\n    | 180\n    | 'PJSIP_SC_CALL_BEING_FORWARDED'\n    | 181\n    | 'PJSIP_SC_QUEUED'\n    | 182\n    | 'PJSIP_SC_PROGRESS'\n    | 183\n    | 'PJSIP_SC_OK'\n    | 200\n    | 'PJSIP_SC_ACCEPTED'\n    | 202\n    | 'PJSIP_SC_MULTIPLE_CHOICES'\n    | 300\n    | 'PJSIP_SC_MOVED_PERMANENTLY'\n    | 301\n    | 'PJSIP_SC_MOVED_TEMPORARILY'\n    | 302\n    | 'PJSIP_SC_USE_PROXY'\n    | 305\n    | 'PJSIP_SC_ALTERNATIVE_SERVICE'\n    | 380\n    | 'PJSIP_SC_BAD_REQUEST'\n    | 400\n    | 'PJSIP_SC_UNAUTHORIZED'\n    | 401\n    | 'PJSIP_SC_PAYMENT_REQUIRED'\n    | 402\n    | 'PJSIP_SC_FORBIDDEN'\n    | 403\n    | 'PJSIP_SC_NOT_FOUND'\n    | 404\n    | 'PJSIP_SC_METHOD_NOT_ALLOWED'\n    | 405\n    | 'PJSIP_SC_NOT_ACCEPTABLE'\n    | 406\n    | 'PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED'\n    | 407\n    | 'PJSIP_SC_REQUEST_TIMEOUT'\n    | 408\n    | 'PJSIP_SC_GONE'\n    | 410\n    | 'PJSIP_SC_REQUEST_ENTITY_TOO_LARGE'\n    | 413\n    | 'PJSIP_SC_REQUEST_URI_TOO_LONG'\n    | 414\n    | 'PJSIP_SC_UNSUPPORTED_MEDIA_TYPE'\n    | 415\n    | 'PJSIP_SC_UNSUPPORTED_URI_SCHEME'\n    | 416\n    | 'PJSIP_SC_BAD_EXTENSION'\n    | 420\n    | 'PJSIP_SC_EXTENSION_REQUIRED'\n    | 421\n    | 'PJSIP_SC_SESSION_TIMER_TOO_SMALL'\n    | 422\n    | 'PJSIP_SC_INTERVAL_TOO_BRIEF'\n    | 423\n    | 'PJSIP_SC_TEMPORARILY_UNAVAILABLE'\n    | 480\n    | 'PJSIP_SC_CALL_TSX_DOES_NOT_EXIST'\n    | 481\n    | 'PJSIP_SC_LOOP_DETECTED'\n    | 482\n    | 'PJSIP_SC_TOO_MANY_HOPS'\n    | 483\n    | 'PJSIP_SC_ADDRESS_INCOMPLETE'\n    | 484\n    | 'PJSIP_AC_AMBIGUOUS'\n    | 485\n    | 'PJSIP_SC_BUSY_HERE'\n    | 486\n    | 'PJSIP_SC_REQUEST_TERMINATED'\n    | 487\n    | 'PJSIP_SC_NOT_ACCEPTABLE_HERE'\n    | 488\n    | 'PJSIP_SC_BAD_EVENT'\n    | 489\n    | 'PJSIP_SC_REQUEST_UPDATED'\n    | 490\n    | 'PJSIP_SC_REQUEST_PENDING'\n    | 491\n    | 'PJSIP_SC_UNDECIPHERABLE'\n    | 493\n    | 'PJSIP_SC_INTERNAL_SERVER_ERROR'\n    | 500\n    | 'PJSIP_SC_NOT_IMPLEMENTED'\n    | 501\n    | 'PJSIP_SC_BAD_GATEWAY'\n    | 502\n    | 'PJSIP_SC_SERVICE_UNAVAILABLE'\n    | 503\n    | 'PJSIP_SC_SERVER_TIMEOUT'\n    | 504\n    | 'PJSIP_SC_VERSION_NOT_SUPPORTED'\n    | 505\n    | 'PJSIP_SC_MESSAGE_TOO_LARGE'\n    | 513\n    | 'PJSIP_SC_PRECONDITION_FAILURE'\n    | 580\n    | 'PJSIP_SC_BUSY_EVERYWHERE'\n    | 600\n    | 'PJSIP_SC_DECLINE'\n    | 603\n    | 'PJSIP_SC_DOES_NOT_EXIST_ANYWHERE'\n    | 604\n    | 'PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE'\n    | 606\n    | 'PJSIP_SC_TSX_TIMEOUT'\n    | 'PJSIP_SC_TSX_TRANSPORT_ERROR';\n\n  /**\n   * The reason phrase describing the last status.\n   *\n   * @returns {string}\n   */\n  getLastReason(): string;\n\n  getMedia(): any;\n\n  getProvisionalMedia(): any;\n\n  /**\n   * Format seconds to \"MM:SS\" format.\n   *\n   * @public\n   * @returns {string}\n   */\n  _formatTime(seconds: number): string;\n}\n\ninterface createAccountConfiguration {\n  name: string;\n  username: string;\n  domain: string;\n  password: string;\n  proxy: string;\n  transport: string;\n  regServer: string;\n  regTimeout: number;\n}\ninterface PjSipCallSetttings {\n  /**\n   *\n   * Bitmask of #pjsua_call_flag constants.\n   * @type {number}\n   * @memberof PjSipCallSetttings\n   */\n  flag: number;\n  /**\n   *\n   * This flag controls what methods to request keyframe are allowed on the call.\n   * @type {number}\n   * @memberof PjSipCallSetttings\n   */\n  req_keyfram_method: number;\n  /**\n   *\n   * Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n   * @type {number}\n   * @memberof PjSipCallSetttings\n   */\n  aud_cnt: number;\n  /**\n   *\n   * Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n   * @type {number}\n   * @memberof PjSipCallSetttings\n   */\n  vid_cnt: number;\n}\ninterface PjSipMsgData {\n  /**\n   *\n   * Indicates whether the Courage component is present.\n   * @type {string}\n   * @memberof PjSipMsgData\n   */\n  target_uri: string;\n  /**\n   *\n   * Additional message headers as linked list.\n   * @type {*}\n   * @memberof PjSipMsgData\n   */\n  hdr_list: {\n    [key: string]: string | number;\n  };\n  /**\n   *\n   * MIME type of optional message body.\n   * @type {string}\n   * @memberof PjSipMsgData\n   */\n  content_type: string;\n  /**\n   *\n   * MIME type of optional message body.\n   * @type {string}\n   * @memberof PjSipMsgData\n   */\n  msg_body: string;\n}\ndeclare type OrientationType =\n  | 'PJMEDIA_ORIENT_UNKNOWN'\n  | 'PJMEDIA_ORIENT_ROTATE_90DEG'\n  | 'PJMEDIA_ORIENT_ROTATE_270DEG'\n  | 'PJMEDIA_ORIENT_ROTATE_180DEG'\n  | 'PJMEDIA_ORIENT_NATURAL';\nexport class Endpoint extends EventEmitter {\n  constructor();\n  /**\n   * Returns a Promise that will be resolved once PjSip module is initialized.\n   * Do not call any function while library is not initialized.\n   *\n   * @returns {Promise}\n   */\n  start(configuration: any): Promise<unknown>;\n  stop(): Promise<unknown>;\n  updateStunServers(accountId: number, stunServerList: any): Promise<unknown>;\n  /**\n   * @param configuration\n   * @returns {Promise}\n   */\n  changeNetworkConfiguration(configuration: any): Promise<unknown>;\n  /**\n   * @param configuration\n   * @returns {Promise}\n   */\n  changeServiceConfiguration(configuration: any): Promise<unknown>;\n  /**\n   * Add a new account. If registration is configured for this account, this function would also start the\n   * SIP registration session with the SIP registrar server. This SIP registration session will be maintained\n   * internally by the library, and application doesn't need to do anything to maintain the registration session.\n   *\n   * An example configuration:\n   * {\n   *   name: \"John Doe\",\n   *   username: \"100\",\n   *   domain: \"pbx.com\",\n   *   password: \"XXXXXX\",\n   *\n   *   proxy: \"192.168.100.1:5060\", // default disabled.\n   *   transport: \"TCP\", // default TCP\n   *   regServer: \"pbx.com\", // default taken from domain\n   *   regTimeout: 300, // default 300\n   * }\n   *\n   * @param {Object} configuration\n   * @returns {Promise}\n   */\n  createAccount(configuration: createAccountConfiguration): Promise<unknown>;\n  /**\n   * Update registration or perform unregistration.\n   * If registration is configured for this account, then initial SIP REGISTER will be sent when the account is added.\n   * Application normally only need to call this function if it wants to manually update the registration or to unregister from the server.\n   *\n   * @param {Account} account\n   * @param bool renew If renew argument is zero, this will start unregistration process.\n   * @returns {Promise}\n   */\n  registerAccount(account: Account, renew?: boolean): Promise<unknown>;\n  /**\n   * Delete an account. This will unregister the account from the SIP server, if necessary, and terminate server side presence subscriptions associated with this account.\n   *\n   * @param {Account} account\n   * @returns {Promise}\n   */\n  deleteAccount(account: Account): Promise<unknown>;\n  /**\n   * Make an outgoing call to the specified URI.\n   * Available call settings:\n   * - audioCount - Number of simultaneous active audio streams for this call. Setting this to zero will disable audio in this call.\n   * - videoCount - Number of simultaneous active video streams for this call. Setting this to zero will disable video in this call.\n   * -\n   *\n   * @param account {Account}\n   * @param destination {String} Destination SIP URI.\n   * @param callSettings {PjSipCallSetttings} Outgoing call settings.\n   * @param msgSettings {PjSipMsgData} Outgoing call additional information to be sent with outgoing SIP message.\n   */\n  makeCall(\n    account: Account,\n    destination: string,\n    callSettings: PjSipCallSetttings,\n    msgData: PjSipMsgData\n  ): Promise<unknown>;\n  /**\n   * Send message to the specified URI.\n   * -\n   *\n   * @param account {Account}\n   * @param destination {String} Destination SIP URI.\n   * @param msg {String} Message.\n   */\n  sendMessage(\n    account: Account,\n    destination: string,\n    msg: string\n  ): Promise<unknown>;\n  imTyping(\n    account: Account,\n    destination: string,\n    isTyping: boolean\n  ): Promise<unknown>;\n  /**\n   * Send response to incoming INVITE request.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  answerCall(call: Call): Promise<unknown>;\n  /**\n   * Hangup call by using method that is appropriate according to the call state.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  hangupCall(call: Call): Promise<unknown>;\n  /**\n   * Hangup call by using Decline (603) method.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  declineCall(call: Call): Promise<unknown>;\n  /**\n   * Put the specified call on hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is being put on hold.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  holdCall(call: Call): Promise<unknown>;\n  /**\n   * Release the specified call from hold. This will send re-INVITE with the appropriate SDP to inform remote that the call is resumed.\n   *\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  unholdCall(call: Call): Promise<unknown>;\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  muteCall(call: Call): Promise<unknown>;\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  unMuteCall(call: Call): Promise<unknown>;\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  useSpeaker(call: Call): Promise<unknown>;\n  /**\n   * @param call {Call} Call instance\n   * @returns {Promise}\n   */\n  useEarpiece(call: Call): Promise<unknown>;\n  /**\n   * Initiate call transfer to the specified address.\n   * This function will send REFER request to instruct remote call party to initiate a new INVITE session to the specified destination/target.\n   *\n   * @param account {Account} Account associated with call.\n   * @param call {Call} The call to be transferred.\n   * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n   * @returns {Promise}\n   */\n  xferCall(account: Account, call: Call, destination: string): Promise<unknown>;\n  /**\n   * Initiate attended call transfer.\n   * This function will send REFER request to instruct remote call party to initiate new INVITE session to the URL of destCall.\n   * The party at destCall then should \"replace\" the call with us with the new call from the REFER recipient.\n   *\n   * @param call {Call} The call to be transferred.\n   * @param destCall {Call} The call to be transferred.\n   * @returns {Promise}\n   */\n  xferReplacesCall(call: Call, destCall: Call): Promise<unknown>;\n  /**\n   * Redirect (forward) specified call to destination.\n   * This function will send response to INVITE to instruct remote call party to redirect incoming call to the specified destination/target.\n   *\n   * @param account {Account} Account associated with call.\n   * @param call {Call} The call to be transferred.\n   * @param destination URI of new target to be contacted. The URI may be in name address or addr-spec format.\n   * @returns {Promise}\n   */\n  redirectCall(\n    account: Account,\n    call: Call,\n    destination: string\n  ): Promise<unknown>;\n  /**\n   * Send DTMF digits to remote using RFC 2833 payload formats.\n   *\n   * @param call {Call} Call instance\n   * @param digits {String} DTMF string digits to be sent as described on RFC 2833 section 3.10.\n   * @returns {Promise}\n   */\n  dtmfCall(call: Call, digits: string): Promise<unknown>;\n  activateAudioSession(): Promise<unknown>;\n  deactivateAudioSession(): Promise<unknown>;\n  changeOrientation(orientation: OrientationType): void;\n  changeCodecSettings(codecSettings: any): Promise<unknown>;\n  /**\n   * @fires Endpoint#connectivity_changed\n   * @private\n   * @param data {Object}\n   */\n  _onConnectivityChanged(data: AccountConstructor): void;\n  /**\n   * @fires Endpoint#gsm_changed\n   * @private\n   * @param data {Boolean}\n   */\n  _onGSMChanged(data: any): void;\n  /**\n   * @fires Endpoint#registration_changed\n   * @private\n   * @param data {Object}\n   */\n  _onRegistrationChanged(data: any): void;\n  /**\n   * @fires Endpoint#call_received\n   * @private\n   * @param data {Object}\n   */\n  _onCallReceived(data: CallConstructor): void;\n  /**\n   * @fires Endpoint#call_changed\n   * @private\n   * @param data {Object}\n   */\n  _onCallChanged(data: CallConstructor): void;\n  /**\n   * @fires Endpoint#call_terminated\n   * @private\n   * @param data {Object}\n   */\n  _onCallTerminated(data: CallConstructor): void;\n  /**\n   * @fires Endpoint#call_screen_locked\n   * @private\n   * @param lock bool\n   */\n  _onCallScreenLocked(lock: boolean): void;\n  /**\n   * @fires Endpoint#message_received\n   * @private\n   * @param data {Object}\n   */\n  _onMessageReceived(data: any): void;\n  /**\n   * Normalize Destination URI\n   *\n   * @param account\n   * @param destination {string}\n   * @returns {string}\n   * @private\n   */\n  _normalize(account: Account, destination: string): string | null;\n}\n"]}