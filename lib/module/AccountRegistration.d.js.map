{"version":3,"sources":["AccountRegistration.d.ts"],"names":["AccountRegistration"],"mappings":";;AAAA;AACA;AACA;AACA;AAOA,eAAe,MAAMA,mBAAN,CAA0B;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAkDzC","sourcesContent":["/**\n * Account registration information. Application can query the registration info\n * by calling account.getRegistration().\n */\ninterface AccountRegistrationConstructor {\n    status: string | null;\n    statusText: string | null;\n    active: boolean;\n    reason: string | null;\n}\nexport default class AccountRegistration {\n    _status: string | null;\n\n    _statusText: string | null;\n\n    _active: boolean;\n\n    _reason: string | null;\n\n    constructor(props: AccountRegistrationConstructor);\n\n    /**\n     * Last registration status code (SIP status codes according to RFC 3261).\n     * If status code is empty, the account is currently not registered.\n     * Any other value indicates the SIP\n     * status code of the registration.\n     *\n     * @returns {string|null}\n     */\n    getStatus(): string | null;\n\n    /**\n     * String describing the registration status.\n     *\n     * @returns {string|null}\n     */\n    getStatusText(): string | null;\n\n    /**\n     * Flag to tell whether this account is currently registered\n     * (has active registration session).\n     *\n     * @returns boolean\n     */\n    isActive(): boolean;\n\n    /**\n     * Reason phrase received.\n     *\n     * @returns {String|null}\n     */\n    getReason(): string | null;\n\n    toJson(): {\n        status: string | null;\n        statusText: string | null;\n        active: boolean;\n        reason: string | null;\n    };\n}\nexport {};\n"]}